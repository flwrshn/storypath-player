import {
  View,
  Text,
  StyleSheet,
  Button,
  Alert,
  ActivityIndicator,
} from "react-native";
import React, { useState, useContext } from "react";
import { CameraView, useCameraPermissions } from "expo-camera";
import { UserContext } from "@/components/context/UserContext";
import { useNavigation } from "expo-router";

const QRScanner = ({ route }) => {
  const { project, locations } = route.params;
  const { loading, addTracking, visitedLocations } = useContext(UserContext);
  const navigation = useNavigation();

  const [scanned, setScanned] = useState(false);
  const [scannedLocation, setScannedLocation] = useState(null);
  const [permission, requestPermission] = useCameraPermissions();

  if (!permission) {
    return (
      <View style={styles.container}>
        <Text>Requesting permissions...</Text>
      </View>
    );
  }

  if (!permission.granted) {
    return (
      <View style={styles.container}>
        <Text style={styles.message}>
          We need your permission to show the camera
        </Text>
        <Button onPress={requestPermission} title="Grant permission" />
      </View>
    );
  }

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#0000ff" />
        <Text>Loading user data...</Text>
      </View>
    );
  }
  // Reset scanner state
  const resetScanner = () => {
    setScanned(false);
    setScannedLocation(null);
  };

  const handleBarCodeScanned = async ({ type, data }) => {
    if (scanned || scannedLocation) return;

    setScanned(true);
    // Ensure it's a QR code
    if (type !== "org.iso.QRCode") {
      Alert.alert("Error", "Please scan a QR code!", [
        { text: "OK", onPress: resetScanner },
      ]);
    }

    // Parse QR code data as project_id, location_id
    const [scannedProjectId, scannedLocationId] = data.split(",");

    if (scannedProjectId !== project.id.toString()) {
      Alert.alert("Error", "Scanned code does not match the current project!", [
        { text: "OK", onPress: resetScanner },
      ]);
    }

    const scannedLocation = locations.find(
      (location) => location.id.toString() === scannedLocationId
    );

    if (scannedLocation) {
      setScannedLocation(scannedLocation);
      addTracking(project.id, scannedLocation.id, scannedLocation.score_points);
    } else {
      Alert.alert("Error", "Scanned code does not match the current project!", [
        { text: "OK", onPress: resetScanner },
      ]);
    }
  };

  // Navigate to location details
  const handleViewDetails = () => {
    if (scannedLocation) {
      // resetScanner();
      navigation.navigate("Location Detail", { location: scannedLocation });
      resetScanner();
    }
  };

  return (
    <View style={styles.container}>
      <Text>Project: {project.title}</Text>
      <CameraView
        style={styles.camera}
        type="front"
        onBarcodeScanned={scanned ? undefined : handleBarCodeScanned}
      />
      {scanned && (
        <View style={styles.scanResultContainer}>
          <Text style={styles.scanResultText}>
            Scanned location: {scannedLocation.location_name}
          </Text>
          <Button title="Tap to Scan Again" onPress={() => resetScanner()} />
          <Button title="View Location Details" onPress={handleViewDetails} />
        </View>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
  },
  message: {
    textAlign: "center",
    paddingBottom: 10,
  },
  camera: {
    flex: 1,
  },
  scanResultContainer: {
    position: "absolute",
    bottom: 0,
    left: 0,
    right: 0,
    backgroundColor: "white",
    padding: 15,
  },
  scanResultText: {
    fontSize: 16,
    marginBottom: 10,
  },
});

export default QRScanner;
